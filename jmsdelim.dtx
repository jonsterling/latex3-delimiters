% \iffalse meta-comment
%
%% File: jmsdelim.dtx Copyright (C) 2019 Jonathan Sterling
%%
%% It may be distributed and/or modified under the conditions of the
%% LaTeX Project Public License (LPPL), either version 1.3c of this
%% license or (at your option) any later version.  The latest version
%% of this license is in the file
%%
%%    http://www.latex-project.org/lppl.txt
%%
%% This file is part of the "GS1 bundle" (The Work in LPPL)
%% and all files in that bundle must be distributed together.
%%
%% The released version of this bundle is available from CTAN.
%%
%% -------------------------------------------------------------------------
%
%<*driver>
\documentclass[cs-f]{l3doc}
\usepackage{jmsdelim}
\usepackage{mleftright}
\usepackage[capitalize]{cleveref}
\usepackage[protrusion=true,expansion=true,tracking=false]{microtype}
\microtypecontext{spacing=nonfrench}

\usepackage{xcolor}
\definecolor{Matterhorn}{RGB}{77,77,77}
\definecolor{RedDevil}{RGB}{134,1,17}
\definecolor{RegalBlue}{RGB}{3,69,117}
\usepackage[backend=biber,natbib=true, doi=true, citestyle=alphabetic, backref=true, style=alphabetic, maxnames=1000]{biblatex}
\hypersetup{breaklinks=true,colorlinks=true,linkcolor=RedDevil,urlcolor=RegalBlue, citecolor=RegalBlue!70}
\usepackage{sectsty}
\allsectionsfont{\sffamily}
\addbibresource{refs.bib}
\setlength\parindent{0pt}
\setlength\parskip{.5em}
%
\let\oldmeta\meta
\renewcommand\meta[1]{\texttt{\oldmeta{#1}}}
%
% ripped from ebproof
\NewDocumentEnvironment{example}{}{%
  \VerbatimEnvironment
  \begin{VerbatimOut}{example.tex}%
}{%
  \end{VerbatimOut}
  \begin{center}
  \begin{minipage}{.4\textwidth}
    \input{example.tex}
  \end{minipage}%
  \begin{minipage}{.6\textwidth}
    \small\VerbatimInput[gobble=0]{example.tex}
  \end{minipage}%
  \end{center}
}
\NewDocumentEnvironment{wide-example}{}{%
  \VerbatimEnvironment
  \begin{VerbatimOut}{example.tex}%
}{%
  \end{VerbatimOut}
  \input{example.tex}
%
  \small\VerbatimInput[gobble=0]{example.tex}
}
%
\begin{document}
  \DocInput{\jobname.dtx}
\end{document}
%</driver>
% \fi
%
% \title{The \pkg{jmsdelim} package}
%
% \author{Jonathan Sterling}
%
% \date{September 14, 2019}
%
% \maketitle
%
% \begin{documentation}
%
% \section{Overview}
%
% Sizing delimiters using \cs{left} and \cs{right} should be outlawed! The results are nearly always unaesthetic, primarily because the correct size of a mathematical delimiter is a typesetting consideration which does \emph{not} emanate from the physical size of the interior.
%
% Correctly sizing delimiters is very difficult, particularly in well-architected documents: a correctly engineered mathematical document will include macros for all operations, and these macros necessarily will include delimiters (such as parentheses). However, the correct size for the delimiter cannot be chosen ahead of time, because it will depend on the arguments; two options are available:
%
% \begin{enumerate}
%   \item Provide optional arguments to each notation macro for choosing delimiter sizes. This is nearly intractable to do in practice.
%   \item Ignore delimiter sizes.
% \end{enumerate}
%
% With \pkg{jmsdelim} we offer an alternative: the correct delimiter sizes can be set at the \emph{leaf nodes} of a mathematical expression, and magically bubble upward through the delimiters.
%
%
% \subsection{Document interface}
%
% \begin{function}{\DelimMin}
%   \begin{syntax}
%     \cs{DelimMin}\marg{intexpr_{min}}
%   \end{syntax}
%
%   This sets the minimum delimiter size to \meta{intexpr_{min}} outside the current location; delimiter sizes are
%   represented as natural numbers, with \verb|0| the smallest size.
% \end{function}
%
% \cs{DelimMin} is the work-horse of \pkg{jmsdelim}; let us consider an example of what one might do prior to adopting \pkg{jmsdelim}. Suppose we have defined a macro \cs{Psh} for the free co-completion, following the notation of the French school, and we wish to parenthesize an instance of it:
% \begin{example}
%   \NewDocumentCommand\Cat{}{\mathbf{Cat}}
%   \NewDocumentCommand\Psh{m}{\widehat{#1}}
%   \NewDocumentCommand\Hom{mmm}{
%     \operatorname{Hom}_{#1}(#2,#3)
%   }
%   \[ \Hom{\Cat}{1}{\Psh{\mathbb{C}}} \]
% \end{example}
%
% One might have tried to get a better result by using \cs{left} and \cs{right}:
% \begin{example}
%   \NewDocumentCommand\Cat{}{\mathbf{Cat}}
%   \NewDocumentCommand\Psh{m}{\widehat{#1}}
%   \NewDocumentCommand\HomX{mmm}{
%     \operatorname{Hom}_{#1}\left(#2,#3\right)
%   }
%   \NewDocumentCommand\Hom{mmm}{
%     \operatorname{Hom}_{#1}\mleft(#2,#3\mright)
%   }
%   \[ \Hom{\Cat}{1}{\Psh{\mathbb{C}}} \]
%   \[ \HomX{\Cat}{1}{\Psh{\mathbb{C}}} \]
% \end{example}
%
% The above is hugely worse: the height of the hat does not in any way determine the correct size for the delimiter! The solution using \pkg{jmsdelim} is quite simple, however: first, we change \cs{Hom} to call \cs{DelimPrn}, and then we use \cs{DelimMin} within the \cs{Psh} notation.
% \begin{example}
%   \NewDocumentCommand\Cat{}{\mathbf{Cat}}
%   \NewDocumentCommand\Psh{m}{\DelimMin{1}\widehat{#1}}
%   \NewDocumentCommand\Hom{mmm}{
%     \operatorname{Hom}_{#1}\DelimPrn{#2,#3}
%   }
%   \[ \Hom{\Cat}{1}{\Psh{\mathbb{C}}} \]
% \end{example}
%
% \begin{function}{\DelimBump}
%   \begin{syntax}
%     \cs{DelimBump}
%   \end{syntax}
%
%   This increases the minimum delimiter size by one outside the current location.
%   This command can be used to insert a separator in a multi-place operation; this can be used to notate cuts in sequent calculus as in \citet{munch:2013,munch:perfectcut}, for instance:
%   \begin{example}
%     \NewDocumentCommand\Cut{mm}{%
%       \DelimBump%
%       \DelimSurround{\langle}{\rangle}{%
%         \DelimBetween{\Vert}{#1}{#2}%
%       }%
%     }
%     \NewDocumentCommand\Mu{mm}{\mu #1.#2}
%     \NewDocumentCommand\MuTilde{mm}{\tilde\mu #1.#2}
%     \[
%       \Cut{t}{
%         \MuTilde{x}{
%           \Cut{\Mu{\alpha}{\Cut{u}{e}}}{e'}
%         }
%       }
%     \]
%   \end{example}
% \end{function}
%
%
%
% \subsection{Basic Delimiter commands}
%
% Like \pkg{mleftright}~\citep{oberdick:mleftright}, \pkg{jmsdelim} ensures the correct amount of space on the outside of the delimiters using \cs{mathopen} and \cs{mathclose}.
%
% \begin{function}{\DelimSurround}
%   \begin{syntax}
%     \cs{DelimSurround}\marg{left}\marg{right}\marg{body}
%   \end{syntax}
%   Surrounds \meta{body} with appropriately sized \meta{left} and \meta{right} delimiters respectively.
% \end{function}
%
% \begin{function}{\DelimBetween}
%   \begin{syntax}
%     \cs{DelimSurround}\marg{sep}\marg{lbody}\marg{rbody}
%   \end{syntax}
%   Places an appropriately sized \meta{sep} between \meta{lbody} and \meta{rbody}.
% \end{function}
%
%
% \subsection{Derived delimiter commands}
%
% \begin{function}{\DelimPrn}
%   \begin{syntax}
%     \cs{DelimPrn}\marg{body}
%   \end{syntax}
%   Surrounds \meta{body} in parentheses.
% \end{function}
%
% \begin{function}{\DelimBrk}
%   \begin{syntax}
%     \cs{DelimBrk}\marg{body}
%   \end{syntax}
%   Surrounds \meta{body} in square brackets.
% \end{function}
%
% \begin{function}{\DelimBrc}
%   \begin{syntax}
%     \cs{DelimBrc}\marg{body}
%   \end{syntax}
%   Surrounds \meta{body} in curly braces.
% \end{function}
%
% \begin{function}{\DelimGl}
%   \begin{syntax}
%     \cs{DelimGl}\marg{body}
%   \end{syntax}
%   Surrounds \meta{body} in angle brackets.
% \end{function}
%
% \begin{function}{\DelimBbrk}
%   \begin{syntax}
%     \cs{DelimBbrk}\marg{body}
%   \end{syntax}
%   Surrounds \meta{body} in Scott brackets (requires \cs{llbracket}, \cs{rrbracket} to be defined).
% \end{function}
%
%
% \subsection{Configuration and options}\label{sec:options}
% \begin{function}{\jmsdelimsetup}
%   \begin{syntax}
%     \cs{jmsdelimsetup}\marg{options}
%   \end{syntax}
%   \pkg{jmsdelim} can be customized along a few axes.
% \end{function}
%
% \begin{variable}{size commands}
%   The option \cmd{size commands} is a comma-separated list which contains a list of sizing commands for delimiters, from smallest to largest.
%
% \end{variable}
%
%
%
% \subsection{Interface for macro authors}
%
% The internals of \pkg{jmsdelim} are implemented in \pkg{expl3}.
% \begin{function}{jmsdelim_surround:nnn}
%   \begin{syntax}
%     "jmsdelim_surround:nnn" \Arg{left} \Arg{right} \Arg{body}
%   \end{syntax}
%   This routine surrounds \meta{body} with the delimiters \meta{left} and \meta{right} of the appropriate size respectively.
% \end{function}
%
% \begin{function}{jmsdelim_between:nnn}
%   \begin{syntax}
%     "jmsdelim_between:nn" \Arg{sep} \Arg{lbody} \Arg{rbody}
%   \end{syntax}
%   This routine separates \meta{lbody} and \meta{rbody} with a separator \meta{sep} of the appropriate size.
% \end{function}

% \section{Extended example from \pkg{perfectcut}}
% \begin{wide-example}
%   \NewDocumentCommand\Cut{mm}{%
%     \DelimBump\DelimGl{\DelimBetween{\Vert}{#1}{#2}}%
%   }
%   \NewDocumentCommand\mt{}{\tilde\mu}
%   \NewDocumentCommand\Case{mm}{%
%     \DelimBrk{\DelimBetween{\vert}{#1}{#2}}%
%   }
%   The following states the idempotency of an adjunction:
%   \[
%   \Cut{t}{\mt x.\Cut{\mu\alpha.\Cut{u}{e}}{e'}}=\Cut{\mu\alpha.\Cut{t}{\mt x.\Cut{u}{e}}}{e'}
%   \]
%
%   The following states the commutativity of a strong monad:
%   \[
%   \Cut t{\mt x.\Cut u{\mt y.\Cut ve}}=\Cut u{\mt y.\Cut t{\mt x.\Cut ve}}
%   \]
%   Using \cs{underline} to mark redexes:
%   \begin{align*}
%     & \delta(V,x.y,x.y)\\
%     & = \mu{\star}.
%         \Cut{V}{
%           \Case{
%             \mt x.\underline{\Cut y{\star}}
%           }{
%             \mt x.\underline{\Cut y{\star}}
%           }
%         }\\
%     & = \mu{\star}.
%         \Cut{V}{
%           \underline{
%             \Case{
%               \mt x.\Cut{\iota_{1}(x)}{\mt z.\Cut{y}{\star}}
%             }{
%               \mt x.\Cut{\iota_{2}(x)}{\mt z.\Cut{y}{\star}}
%             }
%           }
%         }\\
%     & = \mu{\star}.\Cut{V}{\underline{\mt z.}\Cut{y}{\star}}\\
%     & = \mu{\star}.\Cut{y}{\star}\\
%     & =y
%   \end{align*}
% \end{wide-example}
%
%
%
% \end{documentation}
%
% \begin{implementation}
%
% \section{\pkg{jmsdelim} implementation}
% \label{sec:jmsdelim:implementation}
%
%
%    \begin{macrocode}
%<*package>
\RequirePackage{expl3}
\RequirePackage{l3keys2e}
\RequirePackage{xparse}
\RequirePackage{ifluatex}
\RequirePackage{scalerel}
\ProvidesExplPackage {jmsdelim} {2020/11/02} {0.2}
  {Compositional delimiter sizing}
%<@@=jmsdelim>
%    \end{macrocode}
%
% We first declare the options for the \pkg{jmsdelim} module, together with their default valeus.
%
%    \begin{macrocode}
\keys_define:nn { jmsdelim } {
  size~commands .clist_set:N = \l@@_size_cmds,
}
%    \end{macrocode}
%    \begin{macrocode}
\keys_set:nn { jmsdelim } {
  size~commands = {{},\big,\Big,\bigg,\Bigg},
}
%    \end{macrocode}
%
% Then, we set up the internal state that will be used by \pkg{jmsdelim}.
%    \begin{macrocode}
\int_new:N \g@@_size
\int_gset:Nn \g@@_size {0}
\bool_new:N \g@@_bump
\bool_gset:Nn \g@@_bump \c_false_bool
%    \end{macrocode}
%
% \begin{macro}{\@@_clist_item:Nn}
% A version of \cs{clist_item:Nn} that takes the last item when the index is out of bounds.
%    \begin{macrocode}
\cs_new:Npn \@@_clist_item:Nn #1 #2 {
  \clist_item:Nn #1 {
    \int_min:nn { #2 } {\clist_count:N #1}
  }
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\@@_set_delim_size:n}
% Updates the current delimiter size only if it results in an increase.
%    \begin{macrocode}
\cs_new:Npn \@@_set_delim_size:n #1 {
  \int_gset:Nn \g@@_size {
    \int_max:nn {\g@@_size} {#1}
  }
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\@@_incr_delim_size:}
% Increases the current delimiter size by 1.
%    \begin{macrocode}
\cs_new:Npn \@@_incr_delim_size: {
  \@@_set_delim_size:n {\g@@_size + 1}
}
%    \end{macrocode}
% \end{macro}

% \subsection{Preservation of math styles}
% It is fairly complicated and inefficient to preserve math styles across boxes. There is an appropriate way to do so in Lua\LaTeX, which we use conditionally if available; otherwise, we make use of \cs{ThisStyle} and \cs{SavedStyle} from \pkg{scalerel}, which are more inefficient. In fact, it becomes impossible to use \pkg{jmsdelim} in PDF\LaTeX{} when the nesting is sufficiently deep, whereas there is no corresponding blowup in Lua\LaTeX.

% \begin{macro}{@@_luatex_save_mathstyle:N}
%    \begin{macrocode}
\cs_new:Npn \@@_luatex_save_mathstyle:N #1 {
  \ifcase \mathstyle
    \cs_set_eq:NN #1 \displaystyle
  \or
    \cs_set_eq:NN #1 \crampeddisplaystyle
  \or
    \cs_set_eq:NN #1 \textstyle
  \or
    \cs_set_eq:NN #1 \crampedtextstyle
  \or
    \cs_set_eq:NN #1 \scriptstyle
  \or
    \cs_set_eq:NN #1 \crampedscriptstyle
  \or
    \cs_set_eq:NN #1 \scriptscriptstyle
  \or
    \cs_set_eq:NN #1 \crampedscriptscriptstyle
  \fi
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{@@_restore_mathstyle:n}
%    \begin{macrocode}
\cs_new:Npn \@@_restore_mathstyle: {
  \SavedStyle
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{@@_save_mathstyle:n}
%    \begin{macrocode}
\cs_new:Npn \@@_save_mathstyle:n #1 {
  \ifluatex
    \@@_luatex_save_mathstyle:N \@@_restore_mathstyle:
    #1
  \else
    \ThisStyle{#1}
  \fi
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{@@_hboxset:Nn}
% Can only be called in a \cs{@@_save_mathstyle:n} scope.
%    \begin{macrocode}
\cs_new:Npn \@@_hboxset:Nn #1 #2 {
   \mode_if_math:TF
     { \hbox_set:Nn #1 {$\@@_restore_mathstyle: #2$} }
     { \hbox_set:Nn #1 { #2 } }
}
%    \end{macrocode}
% \end{macro}

% \subsection{Public interface for macro authors}

% \begin{macro}{@@_scope:n}
%    \begin{macrocode}
\cs_new:Npn \@@_scope:n #1 {
  \group_begin:
  \@@_save_mathstyle:n {#1}
  \group_end:
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{@@_typeset:Nn}
%    \begin{macrocode}
\cs_new:Npn \@@_typeset:Nn #1 #2 {
  \bool_set:Nn \l_tmpa_bool \g@@_bump
  \int_set:Nn \g@@_size {0}
  \bool_set:Nn \g@@_bump \c_false_bool

  \@@_hboxset:Nn #1 {#2}

  \bool_if:NT \g@@_bump {
    \bool_if:NF \l_tmpa_bool {
      \@@_incr_delim_size:
    }
  }

  \cs_set_nopar:Npn \jmsdelim_size_cmd: {
    \@@_clist_item:Nn \l@@_size_cmds {
      \g@@_size + 1
    }
  }
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{jmsdelim_surround:nnn}
%    \begin{macrocode}
\cs_new:Npn \jmsdelim_surround:nnn #1 #2 #3 {
  \@@_scope:n {
    \@@_typeset:Nn \l_tmpa_box {#3}

    \mathopen\jmsdelim_size_cmd: {#1}
    \box_use:N \l_tmpa_box
    \mathopen\jmsdelim_size_cmd: {#2}
  }
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{jmsdelim_between:nnn}
%    \begin{macrocode}
\cs_new:Npn \jmsdelim_between:nnn #1 #2 #3 {
  \@@_scope:n {
    \@@_typeset:Nn \l_tmpa_box {#2}
    \@@_typeset:Nn \l_tmpb_box {#3}

    \box_use:N \l_tmpa_box
    \mathrel{\jmsdelim_size_cmd: #1}
    \box_use:N \l_tmpb_box
  }
}
%    \end{macrocode}
% \end{macro}

% \subsection{Document interace}


% \begin{macro}{DelimMin}
%    \begin{macrocode}
\NewDocumentCommand\DelimMin{m}{
  \@@_set_delim_size:n {#1}
}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{DelimBump}
%    \begin{macrocode}
\NewDocumentCommand\DelimBump{}{
  \bool_gset:Nn \g@@_bump \c_true_bool
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{DelimSurround}
%    \begin{macrocode}
\NewDocumentCommand\DelimSurround{mmm}{
  \jmsdelim_surround:nnn {#1} {#2} {#3}
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{DelimBetween}
%    \begin{macrocode}
\NewDocumentCommand\DelimBetween{mmm}{
  \jmsdelim_between:nnn {#1} {#2} {#3}
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{DelimPrn}
%    \begin{macrocode}
\NewDocumentCommand\DelimPrn{m}{
  \jmsdelim_surround:nnn {(} {)} {#1}
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{DelimBrk}
%    \begin{macrocode}
\NewDocumentCommand\DelimBrk{m}{
  \jmsdelim_surround:nnn {[} {]} {#1}
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{DelimBrc}
%    \begin{macrocode}
\NewDocumentCommand\DelimBrc{m}{
  \jmsdelim_surround:nnn {\lbrace} {\rbrace} {#1}
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{DelimBbrk}
%    \begin{macrocode}
\NewDocumentCommand\DelimBbrk{m}{
  \jmsdelim_surround:nnn {\llbracket} {\rrbracket} {#1}
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{DelimGl}
%    \begin{macrocode}
\NewDocumentCommand\DelimGl{m}{
  \jmsdelim_surround:nnn {\langle} {\rangle} {#1}
}
%    \end{macrocode}
% \end{macro}
%
%    \begin{macrocode}
\ProcessKeysPackageOptions {jmsdelim}
%    \end{macrocode}
%
%\iffalse meta-comment
%</package>
%\fi
%
% \end{implementation}
%
% \printbibliography
% \PrintIndex
%
\endinput
%
% end of file
